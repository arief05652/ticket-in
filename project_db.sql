-- MySQL Script generated by MySQL Workbench
-- Thu Nov 28 08:06:44 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema project_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema project_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `gdeuqhlz_project_db` DEFAULT CHARACTER SET utf8 ;
USE `gdeuqhlz_project_db` ;

-- -----------------------------------------------------
-- Table `project_db`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  `nama_dpn` VARCHAR(50) NOT NULL,
  `nama_blkg` VARCHAR(50) NOT NULL,
  `no_hp` VARCHAR(30) NULL,
  `role` ENUM('pelanggan', 'admin') NOT NULL DEFAULT 'pelanggan',
  `join_at` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`user_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`bis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`bis` (
  `bis_id` INT NOT NULL AUTO_INCREMENT,
  `merk` VARCHAR(20) NOT NULL,
  `kapasitas` INT NOT NULL,
  `plat_nomor` VARCHAR(15) NOT NULL,
  `status` ENUM('tidak', 'aktif') NOT NULL DEFAULT 'tidak',
  PRIMARY KEY (`bis_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`rute`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`rute` (
  `rute_id` INT NOT NULL AUTO_INCREMENT,
  `tujuan` VARCHAR(45) NOT NULL,
  `titik_penjemputan` TEXT NOT NULL,
  `titik_penurunan` TEXT NOT NULL,
  PRIMARY KEY (`rute_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`jadwal`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`jadwal` (
  `jadwal_id` INT NOT NULL AUTO_INCREMENT,
  `rute_id` INT NOT NULL,
  `bis_id` INT NOT NULL,
  `jam_berangkat` DATETIME NOT NULL,
  `status` ENUM('tidak', 'aktif') NOT NULL DEFAULT 'tidak',
  PRIMARY KEY (`jadwal_id`),
  INDEX `fk_jadwal_rute1_idx` (`rute_id` ASC) VISIBLE,
  INDEX `fk_jadwal_bis1_idx` (`bis_id` ASC) VISIBLE,
  CONSTRAINT `fk_jadwal_rute1`
    FOREIGN KEY (`rute_id`)
    REFERENCES `project_db`.`rute` (`rute_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_jadwal_bis1`
    FOREIGN KEY (`bis_id`)
    REFERENCES `project_db`.`bis` (`bis_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`tiket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`tiket` (
  `tiket_id` INT NOT NULL AUTO_INCREMENT,
  `jadwal_id` INT NOT NULL,
  `harga` INT NOT NULL,
  `stok` INT NOT NULL,
  `status` ENUM('draft', 'public') NOT NULL DEFAULT 'draft',
  PRIMARY KEY (`tiket_id`),
  INDEX `fk_tiket_jadwal1_idx` (`jadwal_id` ASC) VISIBLE,
  CONSTRAINT `fk_tiket_jadwal1`
    FOREIGN KEY (`jadwal_id`)
    REFERENCES `project_db`.`jadwal` (`jadwal_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`pesanan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`pesanan` (
  `pesanan_id` INT NOT NULL AUTO_INCREMENT,
  `tiket_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `jumlah` INT NOT NULL DEFAULT 1,
  `waktu_pesanan` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`pesanan_id`),
  INDEX `fk_pesanan_users_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_pesanan_tiket1_idx` (`tiket_id` ASC) VISIBLE,
  CONSTRAINT `fk_pesanan_users`
    FOREIGN KEY (`user_id`)
    REFERENCES `project_db`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_pesanan_tiket1`
    FOREIGN KEY (`tiket_id`)
    REFERENCES `project_db`.`tiket` (`tiket_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`balance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`balance` (
  `balance_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `balance` DECIMAL(10,2) NULL,
  PRIMARY KEY (`balance_id`),
  INDEX `fk_balance_users1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_balance_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `project_db`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`user_pesanan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`user_pesanan` (
  `up_id` INT NOT NULL AUTO_INCREMENT,
  `pesanan_id` INT NOT NULL,
  `status` ENUM('berhasil', 'cancel') NULL DEFAULT 'berhasil',
  PRIMARY KEY (`up_id`),
  INDEX `fk_user_pesanan_pesanan1_idx` (`pesanan_id` ASC) VISIBLE,
  CONSTRAINT `fk_user_pesanan_pesanan1`
    FOREIGN KEY (`pesanan_id`)
    REFERENCES `project_db`.`pesanan` (`pesanan_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`topup_balance`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`topup_balance` (
  `tb_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `balance_id` INT NOT NULL,
  `amount` DECIMAL(10,2) NOT NULL,
  `waktu` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`tb_id`),
  INDEX `fk_topup_balance_users1_idx` (`user_id` ASC) VISIBLE,
  INDEX `fk_topup_balance_balance1_idx` (`balance_id` ASC) VISIBLE,
  CONSTRAINT `fk_topup_balance_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `project_db`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_topup_balance_balance1`
    FOREIGN KEY (`balance_id`)
    REFERENCES `project_db`.`balance` (`balance_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`history_topup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`history_topup` (
  `ht_id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NOT NULL,
  `amount` DECIMAL(10,2) NOT NULL,
  `status` ENUM('berhasil', 'cancel', 'tolak') NULL,
  `waktu` TIMESTAMP NULL,
  PRIMARY KEY (`ht_id`),
  INDEX `fk_history_topup_users1_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fk_history_topup_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `project_db`.`users` (`user_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `project_db`.`status_topup`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`status_topup` (
  `st_id` INT NOT NULL AUTO_INCREMENT,
  `tb_id` INT NOT NULL,
  `status` ENUM('cancel', 'proses', 'berhasil', 'tolak') NULL DEFAULT 'proses',
  PRIMARY KEY (`st_id`),
  INDEX `fk_status_topup_topup_balance1_idx` (`tb_id` ASC) VISIBLE,
  CONSTRAINT `fk_status_topup_topup_balance1`
    FOREIGN KEY (`tb_id`)
    REFERENCES `project_db`.`topup_balance` (`tb_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `gdeuqhlz_project_db` ;

-- -----------------------------------------------------
-- Placeholder table for view `project_db`.`cek_balance_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`cek_balance_user` (`user_id` INT, `email` INT, `nama_lengkap` INT, `balance` INT);

-- -----------------------------------------------------
-- Placeholder table for view `project_db`.`pesanan_tiket_user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gdeuqhlz_project_db`.`pesanan_tiket_user` (`user_id` INT, `email` INT, `tujuan` INT, `keberangkatan` INT, `harga_satuan` INT, `jumlah_tiket` INT, `total_harga` INT, `status_pesanan` INT, `pemesanan` INT);

-- -----------------------------------------------------
-- View `project_db`.`cek_balance_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gdeuqhlz_project_db`.`cek_balance_user`;
USE `gdeuqhlz_project_db`;
CREATE  OR REPLACE VIEW `cek_balance_user` AS
SELECT
	us.user_id as user_id,
    us.email as email,
    CONCAT(us.nama_dpn, ' ', us.nama_blkg) as nama_lengkap,
    bl.balance as balance
FROM users us
JOIN balance bl ON bl.user_id = us.user_id;

-- -----------------------------------------------------
-- View `project_db`.`pesanan_tiket_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gdeuqhlz_project_db`.`pesanan_tiket_user`;
USE `gdeuqhlz_project_db`;
CREATE  OR REPLACE VIEW `pesanan_tiket_user` AS
SELECT
	u.user_id as user_id,
    u.email as email,
    r.tujuan as tujuan,
    j.jam_berangkat as keberangkatan,
    t.harga as harga_satuan,
    p.jumlah as jumlah_tiket,
    t.harga * p.jumlah as total_harga,
    up.status as status_pesanan,
    p.waktu_pesanan as pemesanan
FROM pesanan p
JOIN users u ON u.user_id = p.user_id
JOIN user_pesanan up ON p.pesanan_id = up.pesanan_id
JOIN tiket t ON t.tiket_id = p.tiket_id
JOIN jadwal j ON j.jadwal_id = t.jadwal_id
JOIN rute r ON r.rute_id = j.rute_id;
USE `gdeuqhlz_project_db`;

DELIMITER $$
USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`users_AFTER_INSERT_1` AFTER INSERT ON `users` FOR EACH ROW
BEGIN
	INSERT INTO balance (user_id, balance)
    VALUES (NEW.user_id, 0);
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`jadwal_AFTER_INSERT_1` AFTER INSERT ON `jadwal` FOR EACH ROW
BEGIN
	UPDATE bis 
    SET status = 'aktif'
    WHERE bis_id = NEW.bis_id;
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`jadwal_AFTER_DELETE_1` AFTER DELETE ON `jadwal` FOR EACH ROW
BEGIN
	UPDATE bis
    SET status = 'tidak'
    WHERE bis_id = OLD.bis_id;
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`tiket_AFTER_INSERT_1` AFTER INSERT ON `tiket` FOR EACH ROW
BEGIN
	UPDATE jadwal 
    SET status = 'aktif'
    WHERE jadwal_id = NEW.jadwal_id;
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`tiket_AFTER_DELETE_1` AFTER DELETE ON `tiket` FOR EACH ROW
BEGIN
	UPDATE jadwal 
    SET status = 'tidak'
    WHERE jadwal_id = OLD.jadwal_id;
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`pesanan_AFTER_INSERT_1` AFTER INSERT ON `pesanan` FOR EACH ROW
BEGIN
    INSERT INTO user_pesanan (pesanan_id, status)
    VALUES (NEW.pesanan_id, 'proses');
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`user_pesanan_AFTER_UPDATE_1` AFTER UPDATE ON `user_pesanan` FOR EACH ROW
BEGIN 
	DECLARE user_id INT; 
    DECLARE tiket_id INT;
    DECLARE jumlah INT;
    DECLARE tujuan VARCHAR(100); 
    DECLARE waktu_pemesanan DATETIME;
    DECLARE total DECIMAL(10, 2);
    DECLARE harga INT;
    
    -- get total di tiket --
    SELECT t.harga INTO harga 
    FROM tiket t
    JOIN pesanan p ON p.tiket_id = t.tiket_id
    LIMIT 1;
    
    -- mengambil id user dari pesanan --
	SELECT p.user_id, p.tiket_id, p.jumlah INTO user_id, tiket_id, jumlah
    FROM pesanan p
    JOIN tiket t ON t.tiket_id = p.tiket_id
    WHERE p.pesanan_id = NEW.pesanan_id
    LIMIT 1;
    
    -- join table untuk push ke history --
    SELECT r.tujuan, p.waktu_pesanan
    INTO tujuan, waktu_pemesanan
    FROM pesanan p
    JOIN tiket t ON t.tiket_id = p.tiket_id
    JOIN jadwal j ON j.jadwal_id = t.jadwal_id
    JOIN rute r ON r.rute_id = j.rute_id
	WHERE p.pesanan_id = NEW.pesanan_id
    LIMIT 1;
    
    -- set total harga --
    SET total = harga * jumlah;
    
    IF NEW.status = 'cancel' THEN
		-- push ke history_pesanan --
		INSERT INTO history_pesanan (user_id, total_harga, tujuan, waktu_pemesanan, status_pesanan) 
		VALUES (user_id, total, tujuan, waktu_pemesanan, NEW.status); 
		-- update balance user --
		UPDATE balance
        SET balance = balance + total
        WHERE user_id = user_id;
        -- delete pesanan --
        DELETE FROM pesanan p
        WHERE p.pesanan_id = NEW.pesanan_id;
	END IF;
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`topup_balance_AFTER_INSERT_1` AFTER INSERT ON `topup_balance` FOR EACH ROW
BEGIN
	INSERT INTO status_topup (tb_id, status)
    VALUES (NEW.tb_id, 'proses');
END$$

USE `gdeuqhlz_project_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gdeuqhlz_project_db`.`status_topup_AFTER_UPDATE_1` AFTER UPDATE ON `status_topup` FOR EACH ROW
BEGIN
    -- user id & balance terakhir --
	DECLARE user_id INT;
    DECLARE balance DECIMAL(10, 2);
    DECLARE amount DECIMAL(10, 2);
    DECLARE total DECIMAL(10, 2);
    DECLARE waktu TIMESTAMP;
    
    -- ambil user id -- 
    SELECT tb.user_id, b.balance, tb.amount, tb.waktu 
    INTO user_id, balance, amount, waktu
    FROM topup_balance tb
    JOIN balance b ON b.balance_id = tb.balance_id
    LIMIT 1;
    
    SET total = balance + amount;
    
    IF NEW.status IN ('tolak', 'cancel') THEN
		-- insert to history topup --
		INSERT INTO history_topup (user_id, amount, status, waktu)
        VALUES (user_id, amount, NEW.status, waktu);
        -- delete row --
        DELETE FROM topup_balance tb
        WHERE tb_id = NEW.tb_id;
    END IF;
    
	IF NEW.status = 'berhasil' THEN
		-- insert to history topup --
		INSERT INTO history_topup (user_id, amount, status, waktu)
        VALUES (user_id, total, 'berhasil', waktu);
        -- update balance --
        UPDATE balance
        SET balance = balance + amount
        WHERE user_id = user_id;
        -- delete row --
        DELETE FROM topup_balance tb
        WHERE tb_id = NEW.tb_id;
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
